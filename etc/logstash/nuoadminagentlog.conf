input {
  file {
    path => "${LOGSTASH_INPUT_FILE_PATH:/var/log/nuodb/agent.log}"
    start_position => "beginning"
    sincedb_path => "${LOGSTASH_SINCEDB_PATH:/dev/null}"
    codec => multiline {
      pattern => "%{TIMESTAMP_ISO8601} "
      auto_flush_interval => 5
      negate => true
      what => "previous"
    }
 }
}

filter {
  grok {
    match => { "message" => [
      "%{TIMESTAMP_ISO8601:timestamp_iso8601} %{LOGLEVEL:loglevel} %{NOTSPACE:logger} %{NOTSPACE:thread} +%{GREEDYDATA:message}",
      "%{TIMESTAMP_ISO8601:timestamp_iso8601} \[%{POSINT:engine_pid}\] +%{GREEDYDATA:message}",
      "%{TIMESTAMP_ISO8601:timestamp_iso8601} %{LOGLEVEL:loglevel} +%{GREEDYDATA:message}"
    ] }
    overwrite => [ "message" ]
  }

  mutate {
    strip => ["message"]
  }

  if ![logger] {
    ruby {
      code => "event.set('logger', nil)"
    }
  }

  if [logger] == "Environment.logEnv" {
    grok {
      keep_empty_captures => true
      match => { "message" => [
        "NuoDB %{WORD:directory} directory: %{GREEDYDATA:value}",
        "NuoAgent version: %{GREEDYDATA:version}",
	"Java: %{GREEDYDATA:java_version}",
	"Java VM: %{GREEDYDATA:java_vm}",
	"Java Runtime: %{GREEDYDATA:java_runtime}",
	"Java Home directory: %{GREEDYDATA:java_home}"
      ] }
    }
  }

  if [logger] == "Environment.logEnv" and [version] {
    mutate {
      add_field => {
        'entity' => "Peer"
        'action' => "Joined"
        'node_state' => "STARTING"
        'comment' => "%{version}"
      }
    }
  }

  if [logger] == "LocalServer.logNewRole" {
    grok {
      keep_empty_captures => true
      match => { "message" => [ 
        "\[.*\] Converting to (?<action>LEADER) \(term=[0-9]+, index=[0-9]+\)( %{GREEDYDATA:comment})?",
        "\[.*\] Converting to (?<action>FOLLOWER) \(term=[0-9]+, index=[0-9]+\)( %{GREEDYDATA:comment})?",
        "\[.*\] Converting to (?<action>CANDIDATE) \(term=[0-9]+, index=[0-9]+\)"
      ] }
    }
  }

  if [logger] == "PropertiesContainerImpl.logProps" {
    grok {
      keep_empty_captures => true
      match => { "message" => "Property %{NOTSPACE:property}=%{GREEDYDATA:value}"
      }
    }
  }

  if [logger] == "URLPropertiesProvider.<init>" {
    grok {
      keep_empty_captures => true
      match => { "message" => ".*properties file: %{GREEDYDATA:propertyfile}"
      }
    }
  }

  if [logger] == "PeerContainerImpl$LocalPeer.initStableId" {
    grok {
      keep_empty_captures => true
      match => { "message" => "Initializing local peer.* uuid:%{UUID:stableid}"
      }
    }
  }

  if [logger] == "PeerContainerImpl$LocalPeer.<init>" {
    grok {
      keep_empty_captures => true
      match => { "message" => "local bind address=%{IPORHOST:bindhost}?/%{IPORHOST:bindaddr}?:%{POSINT:bindport}, hostname=%{IPORHOST:bhostname}"
      }
    }
  }

  if [logger] == "PeerService$EntryListener.handleMessage" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => [
        "Peering reply from \[%{IPORHOST:peerhost}?/%{IPORHOST:peeraddr}?:%{POSINT:peerport}, uuid:%{UUID:stableid}\] \(%{NUODB_AGENTTYPE:peertype}\)",
	"License Allowed Hosts: %{POSINT}"
      ] }
    }
    if [stableid] {
      mutate {
        add_field => {
          'iporaddr' => "%{peeraddr}"
	  'port' => "%{peerport}"
        }
      }

    }
  }

  if [logger] == "TagServer$DomainJoinedRunnable.run" {
    grok {
      keep_empty_captures => true
      match => { "message" => "Region is: %{GREEDYDATA:region}"
      }
    }
  }

  if [logger] == "EventManager.notifyPeerEvent" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{NUODB_ENTITY:entity} %{NUODB_ACTIONS:action}: \[%{NUODB_PEER:peer_description}\]"
      }
    }
  }

  if [logger] == "EventManager.notifyDomainEvent" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{NUODB_ACTIONS:action} %{NUODB_ENTITY:entity}"
      }
    }
  }

  if [logger] == "EventManager.notifyNodeEvent" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{NUODB_ENTITY:entity} %{NUODB_ACTIONS:action}%{GREEDYDATA:comment}?: %{NUODB_NODE:node_description}"
      }
    }
  }

  if [logger] == "EventManager.notifyNodeIdSet" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{NUODB_ENTITY:entity} %{NUODB_ACTIONS:action}=%{POSINT:newnodeid} %{NUODB_NODE:node_description}"
      }
    }
  }

  if [logger] == "EventManager.notifyNodeStateChange" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{NUODB_ENTITY:entity} %{NUODB_ACTIONS:action} changed to %{WORD:node_state} %{NUODB_NODE:node_description}"
      }
    }
  }

  if [logger] == "EventManager.notifyNodeFailure" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => [
        "%{NUODB_ENTITY:entity} %{NUODB_ACTIONS:action} peer=\[%{NUODB_PEER}\] startId=\[%{NUMBER:startId}\]:%{NUODB_GREEDYDATA:comment}",
        "%{NUODB_ENTITY:entity} %{NUODB_ACTIONS:action} %{NUODB_NODE:node_description}: %{NUODB_GREEDYDATA:comment}"
      ] }
    }
  }

  if [logger] == "ProcessService$ProcessReaper.reapConnected" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{WORD:action} process with pid %{NUODB_PID:node_pid} and exit code %{NUMBER:exitcode}"
      }
    }
  }

  if [logger] == "ProcessService.nodeLeft" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => [
        "%{WORD:action} up pid.%{NUMBER:node_pid} with exit code.%{NUMBER:exitcode}",
        "Marking process with %{NUODB_ENTITY:entity} object %{NUODB_NODE:node_description} for %{NUODB_ACTIONS:action}"
      ] }
    }
  }

  if [logger] == "ProcessService$ProcessReaper.reapConnected" or [logger] == "ProcessService.nodeLeft" {

    if [action] and [exitcode] {
      mutate {
        add_field => {
          'comment' => "exit code %{exitcode}"
        }
      }
    }

    if [action] {
      mutate {
        replace => { 'entity' => "Node" }
        replace => { "node_state" => "FINISHED" }
        gsub => [
          "node_pid", ",", ""
        ]
      }
    }
  }

  if [logger] == "NuoAgent.logReady" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{GREEDYDATA:comment}; agent is ready"
      }
    }
    mutate {
      add_field => {
        'entity' => "Peer"
        'action' => "State"
        'node_state' => "STARTED"
      }
    }
  }


  if [logger] == "NuoAgent.shutdown" {
    grok {
      patterns_dir => ["${NUOCA_HOME}/etc/logstash/nuodb_patterns"]
      keep_empty_captures => true
      match => { "message" => "%{GREEDYDATA:comment}"
      }
    }
    mutate {
      add_field => {
        'entity' => "Peer"
        'action' => "Left"
        'node_state' => "EXITTED"
      }
    }
  }

  if [entity] and [entity] ==  "Node" {
    if [action] and [action] == "setId" {
       mutate {
         add_field => {
           'node_state' => "STARTED"
         }
       }
    }
    if [action] and [action] == "joined" {
       mutate {
         add_field => {
           'node_state' => "STARTING"
         }
       }
    }
    if [action] and [action] == "left" {
       mutate {
         add_field => {
           'node_state' => "EXITTED"
         }
       }
    }
    if [action] and [action] == "failed" {
       mutate {
         add_field => {
           'node_state' => "FAILED"
         }
       }
    }
    if [observed] {
       mutate {
         update => {
           'action' => "%{action}/%{observed}"
         }
       }
    }
  }

  throttle {
    before_count => -1
    after_count => 1000
    period => 300
    max_age => 600
    key => "%{engine_pid}"
    add_tag => "throttled"
  }

}

output {
  stdout { codec => json_lines }
}
